
inline fn poly_add(reg ptr u16[WOOKIE_N] r_coeffs a_coeffs b_coeffs)->reg ptr u16[WOOKIE_N]
{
    reg u64 i;
    reg u16 temp;

    i=0;
    while(i<WOOKIE_N)
    {
        temp=a_coeffs[(int)i];
        temp+=b_coeffs[(int)i];
        r_coeffs[(int)i]=temp;
        i+=1;
    }

    return r_coeffs;
}

inline fn poly_add_inplace(reg ptr u16[WOOKIE_N] r_coeffs b_coeffs)->reg ptr u16[WOOKIE_N]
{
    reg u64 i;
    reg u16 temp;

    i=0;
    while(i<WOOKIE_N)
    {
        temp=r_coeffs[(int)i];
        temp+=b_coeffs[(int)i];
        r_coeffs[(int)i]=temp;
        i+=1;
    }

    return r_coeffs;
}
  
export fn jazz_poly_add(reg u64 pr pa pb)
{
   inline int i;
   stack u16[WOOKIE_N]  sa, sb, sr;
   reg ptr u16[WOOKIE_N] r, a, b;

   sa= to_stack_array_16_N(sa, pa);
   sb= to_stack_array_16_N(sb, pb);

   r=sr; //Can directly pass sr,sa, sb to func, compiler will convert automatically
   a=sa;
   b=sb;

   //Saves result of add in pA
   r=poly_add(r, a, b); 
   
   sr=r; // not necessary
   
   from_stack_array_16_N(sr,pr);
}



