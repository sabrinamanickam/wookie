require "shake256.jinc"

inline fn hamming (reg u8 a)->reg u8
{
    inline int i;
    reg u8 r tmp;
    r=0;
    for i=0 to 8{
        tmp=a;
        tmp>>=i;
        tmp=tmp&1;
        r+=tmp;
    }
   return r;
}


 inline fn poly_getnoise(reg ptr u16[WOOKIE_N] r_coeffs, reg ptr u8[WOOKIE_SYMBYTES] seed0, reg u8 seed1)->reg u16[WOOKIE_N]
{
    reg u64 i index rseed;
    reg u8 tmp1 tmp2 ;
    reg u16 res1 res2;

    stack u8[2*WOOKIE_N] buf;
    reg ptr u8[2*WOOKIE_N] rbuf;

    stack u8[WOOKIE_SYMBYTES+1] seed;
    
    stack ptr u16[WOOKIE_N] sr; //why not reg ptr
    sr=r_coeffs;
    
    rbuf=buf;
    i=0;
    
    while(i<WOOKIE_SYMBYTES)
    {
        seed[(int)i]=seed0[(int)i];
        i+=1;
    }
    seed[(int)i]=seed1;
    rbuf=_shake256_33(rbuf,seed);
    
    index=0;
    i=0;
    r_coeffs=sr;

    while(i<WOOKIE_N)
    {
        index=i*2;
        tmp1=hamming(rbuf.[u8(int)index]);
        index+=1;
        tmp2=hamming(rbuf.[u8(int)index]);
        res1=(16u)tmp1;
        res2=(16u)tmp2;
        res1-=res2;
        r_coeffs[(int)i]=res1;
        i+=1;
    }

    return r_coeffs;
}
export fn jazz_poly_getnoise(reg u64 pr ps, reg u8 ps1)
{
   reg u64 ppr;
   ppr=pr;
   stack u16[WOOKIE_N] sr;
   reg ptr u16[WOOKIE_N] r;

   stack u8[32]  ss0;
   reg ptr u8[32]  s0;

   ss0=to_stack_array_8_SYM(ss0, ps);
    s0=ss0;
    sr=to_stack_array_16_N(sr,ppr);
    r=sr;

    r=poly_getnoise(r,s0,ps1);
    sr=r;

    from_stack_array_16_N(sr,ppr);

}
