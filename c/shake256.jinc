require "common/keccak/keccak1600/amd64/avx2/keccak1600.jinc"
require "common/keccak/keccak1600/amd64/ref1/keccak1600.jinc"
require "common/keccak/common/fips202_params.jinc"

param int WOOKIE_BLOCKS=(2*WOOKIE_N)/SHAKE256_RATE;
inline fn __shake256_avx2(reg u64 out outlen in inlen)
{
  reg u64 rate;
  reg u8 trail_byte;

  trail_byte = 0x1F;
  rate = (1088/8);

  __keccak1600_avx2(out, outlen, in, inlen, trail_byte, rate);
}

inline fn _shake256_33(reg ptr u8[2*WOOKIE_N] out, reg const ptr u8[33] in) -> stack u8[2*WOOKIE_N]
{
  stack ptr u8[2*WOOKIE_N] s_out;
  stack u64[25] _state;
  reg ptr u64[25] state;
  reg u8 c;
  reg u8 t;
  inline int i j;

  s_out = out;

  state = _state;
  state =  __keccak_init_ref1(state);

  for i = 0 to 33 {
    t = in[i];
    state[u8 i] ^= t;
  }
  state.[u16 33] ^= 0x1f;
  state.[u8 SHAKE256_RATE-1] ^= 0x80;

  state = _keccakf1600_ref1(state);
  for j=0 to WOOKIE_BLOCKS
  {
  out = s_out;
  
  for i = 0 to SHAKE256_RATE {
    t = state[u8 i];
    out[SHAKE256_RATE*j+i] = t;
  }

  s_out = out;

  state = _keccakf1600_ref1(state);
  }
  out = s_out;
  
  for i = 0 to ((2*WOOKIE_N)-SHAKE256_RATE*WOOKIE_BLOCKS) {
    c = state[u8 i];
    out[SHAKE256_RATE*WOOKIE_BLOCKS + i] = c;
  }

  return out;
}

inline fn _shake256_32(reg ptr u8[2*WOOKIE_N] out, reg const ptr u8[32] in) -> stack u8[2*WOOKIE_N]
{
  stack ptr u8[2*WOOKIE_N] s_out;
  stack u64[25] _state;
  reg ptr u64[25] state;
  reg u8 c;
  reg u8 t;
  inline int i j;

  s_out = out;

  state = _state;
  state =  __keccak_init_ref1(state);

  for i = 0 to 32 {
    t = in[i];
    state[u8 i] ^= t;
  }
  state.[u16 32] ^= 0x1f;
  state.[u8 SHAKE256_RATE-1] ^= 0x80;

  state = _keccakf1600_ref1(state);
  for j=0 to WOOKIE_BLOCKS
  {
  out = s_out;
  
  for i = 0 to SHAKE256_RATE {
    t = state[u8 i];
    out[SHAKE256_RATE*j+i] = t;
  }

  s_out = out;

  state = _keccakf1600_ref1(state);
  }
  out = s_out;
  
  for i = 0 to ((2*WOOKIE_N)-SHAKE256_RATE*WOOKIE_BLOCKS) {
    c = state[u8 i];
    out[SHAKE256_RATE*WOOKIE_BLOCKS + i] = c;
  }

  return out;
}

/*inline fn _shake256_2080(reg ptr u8[2*WOOKIE_N] out, reg const ptr u8[2080] in) -> stack u8[2*WOOKIE_N]
{
  stack ptr u8[2*WOOKIE_N] s_out;
  stack u64[25] _state;
  reg ptr u64[25] state;
  reg u8 c;
  reg u8 t;
  inline int i j;

  s_out = out;

  state = _state;
  state =  __keccak_init_ref1(state);

  for i = 0 to 200 {
    t = in[i];
    state[u8 i] ^= t;
  }
  state.[u16 2080] ^= 0x1f;
  state.[u8 SHAKE256_RATE-1] ^= 0x80;

  state = _keccakf1600_ref1(state);
  for j=0 to WOOKIE_BLOCKS
  {
  out = s_out;
  
  for i = 0 to SHAKE256_RATE {
    t = state[u8 i];
    out[SHAKE256_RATE*j+i] = t;
  }

  s_out = out;

  state = _keccakf1600_ref1(state);
  }
  out = s_out;
  
  for i = 0 to ((2*WOOKIE_N)-SHAKE256_RATE*WOOKIE_BLOCKS) {
    c = state[u8 i];
    out[SHAKE256_RATE*WOOKIE_BLOCKS + i] = c;
  }

  return out;
}*/

fn _shake256_2080(reg ptr u8[2*WOOKIE_N] out, reg const ptr u8[WOOKIE_PKE_PUBLICKEYBYTES] in) -> stack u8[2*WOOKIE_N]
{
  stack ptr u8[2*WOOKIE_N] s_out;
  stack u64[25] _state;
  reg ptr u64[25] state;
  reg u8 c;
  inline int i;

  s_out = out;

  state = _state;
  state =  __keccak_init_ref1(state);

  for i = 0 to 200 {
    c = in[i];
    state[u8 i] ^= c;
  }
  state[u8 33] ^= 0x1f;
  state[u8 SHAKE256_RATE-1] ^= 0x80;

  state = _keccakf1600_ref1(state);

  out = s_out;
  
  for i = 0 to SHAKE256_RATE {
    c = state[u8 i];
    out[i] = c;
  }

  s_out = out;

  state = _keccakf1600_ref1(state);

  out = s_out;
  
  for i = 0 to ((2*WOOKIE_N)-SHAKE256_RATE*WOOKIE_BLOCKS) {
    c = state[u8 i];
    out[SHAKE256_RATE + i] = c;
  }

  return out;
}
